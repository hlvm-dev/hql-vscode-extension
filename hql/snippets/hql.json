{
    "Define Variable (def)": {
      "prefix": "def",
      "body": [
        "(def ${1:name} ${2:value})"
      ],
      "description": "Define a variable"
    },
    "Define Synchronized Variable (defsync)": {
      "prefix": "defsync",
      "body": [
        "(defsync ${1:name} ${2:value})"
      ],
      "description": "Define a synchronized variable"
    },
    "Define Function (defn)": {
      "prefix": "defn",
      "body": [
        "(defn ${1:name} (${2:params})",
        "  ${3:body})"
      ],
      "description": "Define a function"
    },
    "Define Function with Type Annotations": {
      "prefix": "defnt",
      "body": [
        "(defn ${1:name} (${2:param1}: ${3:Type1} ${4:param2}: ${5:Type2}) (-> ${6:ReturnType})",
        "  ${7:body})"
      ],
      "description": "Define a function with type annotations"
    },
    "Define Function with Named Parameters": {
      "prefix": "defnn",
      "body": [
        "(defn ${1:name} (${2:param1}: ${3:param2}:)",
        "  ${4:body})"
      ],
      "description": "Define a function with named parameters"
    },
    "Anonymous Function (fn)": {
      "prefix": "fn",
      "body": [
        "(fn (${1:params})",
        "  ${2:body})"
      ],
      "description": "Anonymous function"
    },
    "Anonymous Function with Type Annotations": {
      "prefix": "fnt",
      "body": [
        "(fn (${1:param1}: ${2:Type1} ${3:param2}: ${4:Type2}) (-> ${5:ReturnType})",
        "  ${6:body})"
      ],
      "description": "Anonymous function with type annotations"
    },
    "Define Macro (defmacro)": {
      "prefix": "defmacro",
      "body": [
        "(defmacro ${1:name} (${2:params})",
        "  ${3:body})"
      ],
      "description": "Define a macro"
    },
    "Define Enum (defenum)": {
      "prefix": "defenum",
      "body": [
        "(defenum ${1:EnumName} ${2:value1} ${3:value2} ${4:value3})"
      ],
      "description": "Define an enum"
    },
    "Import Module": {
      "prefix": "import",
      "body": [
        "(def ${1:moduleName} (import \"${2:path}\"))"
      ],
      "description": "Import a module"
    },
    "Export Symbol": {
      "prefix": "export",
      "body": [
        "(export \"${1:exportName}\" ${2:symbol})"
      ],
      "description": "Export a symbol"
    },
    "Vector (Array) Literal": {
      "prefix": "vector",
      "body": [
        "[${1:item1}, ${2:item2}, ${3:item3}]"
      ],
      "description": "Create a vector/array literal"
    },
    "Object Literal": {
      "prefix": "object",
      "body": [
        "{\"${1:key1}\": ${2:value1}, \"${3:key2}\": ${4:value2}}"
      ],
      "description": "Create an object literal"
    },
    "Set Literal": {
      "prefix": "set",
      "body": [
        "#[${1:item1}, ${2:item2}, ${3:item3}]"
      ],
      "description": "Create a set literal"
    },
    "Hash Map": {
      "prefix": "hash-map",
      "body": [
        "(hash-map",
        "  (keyword \"${1:key1}\") ${2:value1}",
        "  (keyword \"${3:key2}\") ${4:value2})"
      ],
      "description": "Create a hash map"
    },
    "Let Binding": {
      "prefix": "let",
      "body": [
        "(let [",
        "  ${1:name1} ${2:value1}",
        "  ${3:name2} ${4:value2}",
        "]",
        "  ${5:body})"
      ],
      "description": "Create a let binding"
    },
    "If Statement": {
      "prefix": "if",
      "body": [
        "(if ${1:condition}",
        "  ${2:then-branch}",
        "  ${3:else-branch})"
      ],
      "description": "Create an if statement"
    },
    "Cond Expression": {
      "prefix": "cond",
      "body": [
        "(cond",
        "  ${1:condition1} ${2:result1}",
        "  ${3:condition2} ${4:result2}",
        "  true ${5:default-result})"
      ],
      "description": "Create a cond expression"
    },
    "Function Call with Named Parameters": {
      "prefix": "call-named",
      "body": [
        "(${1:function-name} ${2:param1}: ${3:value1} ${4:param2}: ${5:value2})"
      ],
      "description": "Call a function with named parameters"
    },
    "String Interpolation": {
      "prefix": "str",
      "body": [
        "\"${1:text}\\(${2:expression})${3:more-text}\""
      ],
      "description": "Create a string with interpolation"
    },
    "New Instance": {
      "prefix": "new",
      "body": [
        "(new ${1:ClassName} ${2:arg1} ${3:arg2})"
      ],
      "description": "Create a new instance"
    },
    "Property Access": {
      "prefix": "get",
      "body": [
        "(get ${1:object} \"${2:property}\")"
      ],
      "description": "Access an object property"
    },
    "For Loop": {
      "prefix": "for",
      "body": [
        "(for [${1:var} ${2:init} ${3:condition} ${4:update}]",
        "  ${5:body})"
      ],
      "description": "Create a for loop"
    }
  }