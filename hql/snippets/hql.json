{
  "Function Definition (fn)": {
    "prefix": "fn",
    "body": [
      "(fn ${1:name} (${2:params})",
      "  ${3:body})"
    ],
    "description": "Define a function"
  },
  "Pure Function Definition (fx)": {
    "prefix": "fx",
    "body": [
      "(fx ${1:name} (${2:param1}: ${3:Type1} ${4:param2}: ${5:Type2}) (-> ${6:ReturnType})",
      "  ${7:body})"
    ],
    "description": "Define a pure function with type annotations"
  },
  "Lambda Function": {
    "prefix": "lambda",
    "body": [
      "(lambda (${1:params}) ${2:body})"
    ],
    "description": "Anonymous function"
  },
  "Variable Definition (let)": {
    "prefix": "let",
    "body": [
      "(let ${1:name} ${2:value})"
    ],
    "description": "Define a constant variable"
  },
  "Multiple Variable Definition": {
    "prefix": "let-multi",
    "body": [
      "(let (${1:name1} ${2:value1}",
      "      ${3:name2} ${4:value2})",
      "  ${5:body})"
    ],
    "description": "Define multiple variables with a body"
  },
  "Mutable Variable Definition (var)": {
    "prefix": "var",
    "body": [
      "(var ${1:name} ${2:value})"
    ],
    "description": "Define a mutable variable"
  },
  "If Expression": {
    "prefix": "if",
    "body": [
      "(if ${1:condition}",
      "  ${2:then-branch}",
      "  ${3:else-branch})"
    ],
    "description": "Conditional if expression"
  },
  "Conditional Expression (cond)": {
    "prefix": "cond",
    "body": [
      "(cond",
      "  (${1:condition1}) ${2:result1}",
      "  (${3:condition2}) ${4:result2}",
      "  (else ${5:default-result}))"
    ],
    "description": "Multi-way conditional expression"
  },
  "When Expression": {
    "prefix": "when",
    "body": [
      "(when ${1:condition}",
      "  ${2:body})"
    ],
    "description": "Conditional execution when true"
  },
  "Unless Expression": {
    "prefix": "unless",
    "body": [
      "(unless ${1:condition}",
      "  ${2:body})"
    ],
    "description": "Conditional execution when false"
  },
  "Loop Expression": {
    "prefix": "loop",
    "body": [
      "(loop (${1:var1} ${2:init1} ${3:var2} ${4:init2})",
      "  (if ${5:exit-condition}",
      "    ${6:result}",
      "    (recur ${7:next1} ${8:next2})))"
    ],
    "description": "Loop with recursive binding"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "(for (${1:i} from: ${2:0} to: ${3:10} by: ${4:1})",
      "  ${5:body})"
    ],
    "description": "For loop with named parameters"
  },
  "While Loop": {
    "prefix": "while",
    "body": [
      "(while ${1:condition}",
      "  ${2:body})"
    ],
    "description": "While loop"
  },
  "Import Module": {
    "prefix": "import",
    "body": [
      "(import [${1:symbol1}, ${2:symbol2}] from \"${3:path}\")"
    ],
    "description": "Import symbols from a module"
  },
  "Import Module with Alias": {
    "prefix": "import-as",
    "body": [
      "(import [${1:symbol} as ${2:alias}] from \"${3:path}\")"
    ],
    "description": "Import symbol with alias"
  },
  "Import Namespace": {
    "prefix": "import-ns",
    "body": [
      "(import ${1:module} from \"${2:path}\")"
    ],