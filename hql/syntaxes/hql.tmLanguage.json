{
  "scopeName": "source.hql",
  "name": "HQL",
  "fileTypes": ["hql"],
  "patterns": [
    { "include": "#comment" },
    { "include": "#string" },
    { "include": "#number" },
    { "include": "#boolean" },
    { "include": "#nil" },
    { "include": "#keyword" },
    { "include": "#special-form" },
    { "include": "#function-definition" },
    { "include": "#function-call" },
    { "include": "#type-annotation" },
    { "include": "#named-parameter" },
    { "include": "#default-parameter" },
    { "include": "#vector-literal" },
    { "include": "#object-literal" },
    { "include": "#set-literal" },
    { "include": "#enum-declaration" },
    { "include": "#class-declaration" },
    { "include": "#import-declaration" },
    { "include": "#dot-notation" },
    { "include": "#regular-symbol" },
    { "include": "#parens" }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "match": ";.*$",
          "name": "comment.line.semicolon.hql"
        },
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block.hql"
        },
        {
          "match": "//.*$",
          "name": "comment.line.double-slash.hql"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.hql",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.hql",
          "match": "\\\\."
        },
        {
          "name": "meta.embedded.line.hql",
          "begin": "\\\\\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.embedded.begin.hql"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.embedded.end.hql"
            }
          },
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "number": {
      "match": "(-|\\+)?\\d+(\\.\\d+)?",
      "name": "constant.numeric.hql"
    },
    "boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean.hql"
    },
    "nil": {
      "match": "\\b(nil|null)\\b",
      "name": "constant.language.nil.hql"
    },
    "keyword": {
      "match": "(:|[a-zA-Z][a-zA-Z0-9\\-_]*:)",
      "name": "constant.other.keyword.hql"
    },
    "special-form": {
      "match": "(?<=\\()(def|var|let|fx|fn|defmacro|macro|if|loop|recur|cond|when|unless|for|while|enum|class|case|method|constructor|do|repeat|import|export|set!|return|->|&|\\.|from:|to:|by:)\\b",
      "name": "keyword.control.hql"
    },
    "function-definition": {
      "patterns": [
        {
          "begin": "\\((fn|fx)\\s+([a-zA-Z\\-_][a-zA-Z0-9\\-_\\?!]*)",
          "beginCaptures": {
            "1": { "name": "keyword.control.hql" },
            "2": { "name": "entity.name.function.hql" }
          },
          "end": "\\)",
          "patterns": [
            { "include": "$self" }
          ]
        },
        {
          "begin": "\\((defmacro|macro)\\s+([a-zA-Z\\-_][a-zA-Z0-9\\-_\\?!]*)",
          "beginCaptures": {
            "1": { "name": "keyword.control.hql" },
            "2": { "name": "entity.name.function.macro.hql" }
          },
          "end": "\\)",
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "function-call": {
      "begin": "\\(([a-zA-Z\\-_][a-zA-Z0-9\\-_\\?!]*)",
      "beginCaptures": {
        "1": { "name": "entity.name.function.hql" }
      },
      "end": "\\)",
      "patterns": [
        { "include": "$self" }
      ]
    },
    "type-annotation": {
      "match": "\\b([a-zA-Z][a-zA-Z0-9\\-_]*)\\s*:\\s*([A-Z][a-zA-Z0-9]*(?:\\[\\])?)",
      "captures": {
        "1": { "name": "variable.parameter.hql" },
        "2": { "name": "entity.name.type.hql" }
      }
    },
    "named-parameter": {
      "match": "\\b([a-zA-Z][a-zA-Z0-9\\-_]*):\\s*",
      "captures": {
        "1": { "name": "variable.parameter.hql" }
      }
    },
    "default-parameter": {
      "match": "\\b([a-zA-Z][a-zA-Z0-9\\-_]*)\\s+(=)\\s+",
      "captures": {
        "1": { "name": "variable.parameter.hql" },
        "2": { "name": "keyword.operator.assignment.hql" }
      }
    },
    "vector-literal": {
      "begin": "\\[",
      "end": "\\]",
      "name": "meta.vector.hql",
      "patterns": [
        { "include": "$self" }
      ]
    },
    "object-literal": {
      "begin": "\\{",
      "end": "\\}",
      "name": "meta.object.hql",
      "patterns": [
        { "include": "$self" }
      ]
    },
    "set-literal": {
      "begin": "#\\[",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.set.begin.hql" }
      },
      "end": "\\]",
      "endCaptures": {
        "0": { "name": "punctuation.definition.set.end.hql" }
      },
      "name": "meta.set.hql",
      "patterns": [
        { "include": "$self" }
      ]
    },
    "enum-declaration": {
      "begin": "\\(enum\\s+([A-Z][a-zA-Z0-9_]*)",
      "beginCaptures": {
        "0": { "name": "keyword.control.hql" },
        "1": { "name": "entity.name.type.enum.hql" }
      },
      "end": "\\)",
      "patterns": [
        {
          "begin": "\\(case\\s+([a-zA-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "0": { "name": "keyword.control.hql" },
            "1": { "name": "entity.name.type.enum.case.hql" }
          },
          "end": "\\)",
          "patterns": [
            { "include": "$self" }
          ]
        },
        { "include": "$self" }
      ]
    },
    "class-declaration": {
      "begin": "\\(class\\s+([A-Z][a-zA-Z0-9_]*)",
      "beginCaptures": {
        "0": { "name": "keyword.control.hql" },
        "1": { "name": "entity.name.type.class.hql" }
      },
      "end": "\\)",
      "patterns": [
        {
          "begin": "\\((var|let)\\s+([a-zA-Z][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "keyword.control.hql" },
            "2": { "name": "variable.other.member.hql" }
          },
          "end": "\\)",
          "patterns": [
            { "include": "$self" }
          ]
        },
        {
          "begin": "\\(constructor\\s*\\(",
          "beginCaptures": {
            "0": { "name": "keyword.control.hql" }
          },
          "end": "\\)",
          "patterns": [
            { "include": "$self" }
          ]
        },
        {
          "begin": "\\((fn|fx)\\s+([a-zA-Z\\-_][a-zA-Z0-9\\-_\\?!]*)",
          "beginCaptures": {
            "1": { "name": "keyword.control.hql" },
            "2": { "name": "entity.name.function.method.hql" }
          },
          "end": "\\)",
          "patterns": [
            { "include": "$self" }
          ]
        },
        { "include": "$self" }
      ]
    },
    "import-declaration": {
      "patterns": [
        {
          "begin": "\\(import\\s+\\[",
          "beginCaptures": {
            "0": { "name": "keyword.control.hql" }
          },
          "end": "\\]\\s+from\\s+([\"'])(.+?)\\1\\)",
          "endCaptures": {
            "0": { "name": "keyword.control.hql" },
            "2": { "name": "string.quoted.hql" }
          },
          "patterns": [
            {
              "match": "([a-zA-Z][a-zA-Z0-9\\-_]*)\\s+as\\s+([a-zA-Z][a-zA-Z0-9\\-_]*)",
              "captures": {
                "1": { "name": "variable.other.hql" },
                "2": { "name": "variable.other.hql" }
              }
            },
            {
              "match": "([a-zA-Z][a-zA-Z0-9\\-_]*)",
              "name": "variable.other.hql"
            },
            { "include": "$self" }
          ]
        },
        {
          "begin": "\\(import\\s+([a-zA-Z][a-zA-Z0-9\\-_]*)",
          "beginCaptures": {
            "0": { "name": "keyword.control.hql" },
            "1": { "name": "variable.other.hql" }
          },
          "end": "from\\s+([\"'])(.+?)\\1\\)",
          "endCaptures": {
            "0": { "name": "keyword.control.hql" },
            "2": { "name": "string.quoted.hql" }
          },
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "dot-notation": {
      "match": "\\.([a-zA-Z][a-zA-Z0-9\\-_]*)",
      "captures": {
        "1": { "name": "variable.other.member.hql" }
      }
    },
    "regular-symbol": {
      "match": "\\b([a-zA-Z\\-_][a-zA-Z0-9\\-_\\?!]*)\\b",
      "name": "variable.other.hql"
    },
    "parens": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": { "name": "punctuation.section.parens.begin.hql" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.section.parens.end.hql" }
          },
          "name": "meta.parens.hql",
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    }
  }
}