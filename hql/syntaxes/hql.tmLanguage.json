{
  "scopeName": "source.hql",
  "name": "HQL",
  "fileTypes": ["hql"],
  "patterns": [
    { "include": "#comment" },
    { "include": "#string" },
    { "include": "#number" },
    { "include": "#boolean" },
    { "include": "#nil" },
    { "include": "#keywords" },
    { "include": "#special-keywords" },
    { "include": "#function-definition" },
    { "include": "#function-call" },
    { "include": "#type-annotation" },
    { "include": "#vector-literal" },
    { "include": "#object-literal" },
    { "include": "#set-literal" },
    { "include": "#dot-access" },
    { "include": "#parameter-name" },
    { "include": "#quote" },
    { "include": "#js-interop" },
    { "include": "#variable" },
    { "include": "#parens" }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "match": ";.*$",
          "name": "comment.line.semicolon.hql"
        },
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block.hql"
        },
        {
          "match": "//.*$",
          "name": "comment.line.double-slash.hql"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.hql",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.hql",
          "match": "\\\\."
        }
      ]
    },
    "number": {
      "name": "constant.numeric.hql",
      "match": "\\b-?\\d+(\\.\\d+)?\\b"
    },
    "boolean": {
      "name": "constant.language.boolean.hql",
      "match": "\\b(true|false)\\b"
    },
    "nil": {
      "name": "constant.language.nil.hql",
      "match": "\\b(nil|null)\\b"
    },
    "keywords": {
      "match": "\\(\\s*(let|var|fn|fx|defmacro|macro|if|when|unless|cond|do|set!|loop|recur|for|while|repeat|enum|case|class|constructor|export|import|default|str|print|new|return)\\b",
      "captures": {
        "1": { "name": "keyword.control.hql" }
      }
    },
    "special-keywords": {
      "match": "\\b(from|as)\\b",
      "name": "keyword.control.hql"
    },
    "function-definition": {
      "match": "\\(\\s*(fn|fx|defmacro|macro)\\s+([a-zA-Z_\\-][a-zA-Z0-9_\\-\\?!]*)\\b",
      "captures": {
        "1": { "name": "keyword.control.hql" },
        "2": { "name": "entity.name.function.hql" }
      }
    },
    "function-call": {
      "match": "\\(\\s*([a-zA-Z_\\-][a-zA-Z0-9_\\-\\?!]*)\\b(?!\\s*:)",
      "captures": {
        "1": { "name": "entity.name.function.hql" }
      }
    },
    "type-annotation": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_\\-][a-zA-Z0-9_\\-]*)\\s*:\\s*([A-Z][a-zA-Z0-9]*(?:\\[\\])?|Any|Int|Double|String|Bool)",
          "captures": {
            "1": { "name": "variable.parameter.hql" },
            "2": { "name": "support.type.hql" }
          }
        },
        {
          "match": "\\(->\\s*([A-Z][a-zA-Z0-9]*(?:\\[\\])?|Any|Int|Double|String|Bool)\\)",
          "captures": {
            "1": { "name": "support.type.hql" }
          }
        }
      ]
    },
    "vector-literal": {
      "begin": "\\[",
      "end": "\\]",
      "name": "meta.vector.hql",
      "patterns": [
        { "include": "$self" }
      ]
    },
    "object-literal": {
      "begin": "\\{",
      "end": "\\}",
      "name": "meta.object.hql",
      "patterns": [
        { "include": "$self" }
      ]
    },
    "set-literal": {
      "begin": "#\\[",
      "end": "\\]",
      "name": "meta.set.hql",
      "patterns": [
        { "include": "$self" }
      ]
    },
    "dot-access": {
      "match": "\\.(\\w+)",
      "captures": {
        "1": { "name": "variable.other.member.hql" }
      }
    },
    "parameter-name": {
      "match": "\\b([a-zA-Z][a-zA-Z0-9_\\-]*):\\s*",
      "captures": {
        "1": { "name": "variable.parameter.hql" }
      }
    },
    "quote": {
      "match": "('|`)(\\(|\\w+)",
      "captures": {
        "1": { "name": "keyword.operator.quote.hql" },
        "2": { "name": "constant.other.symbol.quoted.hql" }
      }
    },
    "js-interop": {
      "match": "\\(js-call\\s+([a-zA-Z_\\.]\\w*)\\s+",
      "captures": {
        "1": { "name": "variable.other.object.hql" }
      }
    },
    "variable": {
      "match": "\\b([a-zA-Z_\\-][a-zA-Z0-9_\\-\\?!]*)\\b",
      "name": "variable.other.hql"
    },
    "parens": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    }
  }
}